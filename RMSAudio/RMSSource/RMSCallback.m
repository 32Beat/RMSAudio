////////////////////////////////////////////////////////////////////////////////
/*
	RMSCallback
	
	Created by 32BT on 15/11/15.
	Copyright Â© 2015 32BT. All rights reserved.
*/
////////////////////////////////////////////////////////////////////////////////


#import "RMSCallback.h"



@interface RMSCallback ()
{
	RMSCallbackProcPtr mCallbackProcPtr;
	RMSCallbackDataPtr mCallbackDataPtr;
}

@end


////////////////////////////////////////////////////////////////////////////////
@implementation RMSCallback
////////////////////////////////////////////////////////////////////////////////

+ (const RMSCallbackProcPtr) callbackProcPtr
{
#if DEBUG
	NSLog(@"%@", @"ERROR: no class global callbackProcPtr provided!");
	NSLog(@"%@", [NSThread callStackSymbols]);
#endif

	return nil;
}

////////////////////////////////////////////////////////////////////////////////

- (const RMSCallbackDataPtr) callbackDataPtr
{
	return (__bridge RMSCallbackDataPtr)self;
}

////////////////////////////////////////////////////////////////////////////////
#pragma mark
////////////////////////////////////////////////////////////////////////////////

- (instancetype) init
{
	self = [super init];
	if (self != nil)
	{
		mCallbackProcPtr = [[self class] callbackProcPtr];
		if (mCallbackProcPtr == nil) return nil;
		
		mCallbackDataPtr = [self callbackDataPtr];
		if (mCallbackDataPtr == nil) return nil;
	}
	
	return self;
}

////////////////////////////////////////////////////////////////////////////////
#pragma mark
////////////////////////////////////////////////////////////////////////////////
// macro for condensed, unmanaged access to the RMSCallback object
// for use by the audiothread
#define RMSCallbackBridge(objectPtr) \
((__bridge __unsafe_unretained RMSCallback *)(objectPtr))
////////////////////////////////////////////////////////////////////////////////

OSStatus RunRMSCallback(void *objectPtr, const RMSCallbackInfo *infoPtr)
{
	RMSLinkUpdateTrash(objectPtr);
	
	RMSCallbackProcPtr procPtr = RMSCallbackBridge(objectPtr)->mCallbackProcPtr;
	RMSCallbackDataPtr dataPtr = RMSCallbackBridge(objectPtr)->mCallbackDataPtr;
	return procPtr(dataPtr, infoPtr);
}

////////////////////////////////////////////////////////////////////////////////
@end
////////////////////////////////////////////////////////////////////////////////
